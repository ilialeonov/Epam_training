On the other hand, if you use a language like raw C to do event-driven programming,you need to write the code that constantly checks the event queue for what the operating environment is reporting. This is usually done by encasing your code in a loop with a massive switch statement. This technique is obviously ugly and, in any case, much more difficult to code. Its advantage is that the events you can respond to are not as limited as in the languages which, like Visual Basic, go to great lengths to hide the event queue from the programmer.
The Java programming environment takes an approach somewhere in between the Visual Basic and the raw C in terms of power and the resulting complexity.
Within the limits of the events that the AWT knows about, you completely control how events are transmitted from the event sources (such as buttons or scrollbars) to event listeners. You can designate any object to be an event listener—in practice, you pick an object that can conveniently carry out the desired response to the event. This event delegation model gives you much more flexibility than is possible with Visual Basic, in which the listener is predetermined.
Event sources have methods that allow you to register event listeners with them. When an event happens to the source, the source sends a notification of that event to all the listener objects that were registered for that event.
As one would expect in an object-oriented language like Java, the information about the event is encapsulated in an event object. In Java, all event objects ultimately derive from the class java.util.EventObject. Of course, there are subclasses for each event type, such as ActionEvent and WindowEvent. Different event sources can produce different kinds of events. For example, a button can send ActionEvent objects, whereas a window can send WindowEvent objects.
To sum up, here’s an overview of how event handling in the AWT works:
 A listener object is an instance of a class that implements a special interface called (naturally enough) a listener interface.
 An event source is an object that can register listener objects and send them event objects.
 The event source sends out event objects to all registered listeners when that event occurs.
 The listener objects will then use the information in the event object todetermine their reaction to the event.
 Chapter 11 Event Handling.
Figure 11.1 shows the relationship between the event handling classes and interfaces.
Figure 11.1 Relationship between event sources and listeners.
Here is an example for specifying a listener:
JButton button = new JButton("OK");
button.addActionListener(listener);
Now the listener object is notified whenever an “action event” occurs in the button. For buttons, as you might expect, an action event is a button click. To implement the ActionListener interface, the listener class must have a method called actionPerformed that receives an ActionEvent object as a parameter.
11.1 Basics of Event Handling.
Whenever the user clicks the button, the JButton object creates an ActionEvent object and calls listener.actionPerformed(event), passing that event object. An event source such as a button can have multiple listeners. In that case, the button calls the actionPerformed methods of all listeners whenever the user clicks the button.
Figure 11.2 shows the interaction between the event source, event listener, and event object.
Figure 11.2 Event notification.
 Chapter 11 Event Handling.
11.1.1 Example: Handling a Button Click.
As a way of getting comfortable with the event delegation model, let’s work through all the details needed for the simple example of responding to a button click. For this example, we will show a panel populated with three buttons. Three listener objects are added as action listeners to the buttons. With this scenario, each time a user clicks on any of the buttons on the panel, the associated listener object receives an ActionEvent that indicates a button click. In our sample program, the listener object will then change the background color of the panel.
Before we can show you the program that listens to button clicks, we first need to explain how to create buttons and how to add them to a panel. (For more on GUI elements, see Chapter 12.) To create a button, specify a label string, an icon, or both in the button constructor. 
Here are two examples:
JButton yellowButton = new JButton("Yellow");
JButton blueButton = new JButton(new ImageIcon("blue-ball.gif"));
Call the add method to add the buttons to a panel:
JButton yellowButton = new JButton("Yellow");
JButton blueButton = new JButton("Blue");
JButton redButton = new JButton("Red");
buttonPanel.add(yellowButton);
buttonPanel.add(blueButton);
buttonPanel.add(redButton);
Figure 11.3 shows the result.
Figure 11.3 A panel filled with buttons.
11.1 Basics of Event Handling. 
Next, we need to add code that listens to these buttons. This requires classes that implement the ActionListener interface, which, as we just mentioned, has one method: actionPerformed, whose signature looks like this:
public void actionPerformed(ActionEvent event);
NOTE: The ActionListener interface we used in the button example is not restricted.
to button clicks. It is used in many separate situations:
 When an item is selected from a list box with a double click;
 When a menu item is selected;
 When the Enter key is pressed in a text field;
 When a certain amount of time has elapsed for a Timer component;
You will see more details in this chapter and the next. The way to use the ActionListener interface is the same in all situations: The actionPerformed method (which is the only method in ActionListener) takes an object of type ActionEvent as a parameter. This event object gives you information about the event that happened. When a button is clicked, we want the background color of the panel to change to a particular color. We store the desired color in our listener class. 
We then construct one object for each color and set the objects as the button listeners.
 Chapter 11 Event Handling.
ColorAction yellowAction = new ColorAction(Color.YELLOW);
ColorAction blueAction = new ColorAction(Color.BLUE);
ColorAction redAction = new ColorAction(Color.RED);
yellowButton.addActionListener(yellowAction);
blueButton.addActionListener(blueAction);
redButton.addActionListener(redAction);
For example, if a user clicks on the button marked “Yellow,” the actionPerformed method of the yellowAction object is called. Its backgroundColor instance field is set to Color.YELLOW, and it can now proceed to set the panel’s background color. Just one issue remains. The ColorAction object doesn’t have access to the buttonPanel variable. You can solve this problem in two ways. You can store the panel in the ColorAction object and set it in the ColorAction constructor. Or, more conveniently, you can make ColorAction into an inner class of the ButtonFrame class. Its methods can then access the outer panel automatically. For more information on inner classes, see Chapter 6.
We follow the latter approach. Here is how you place the ColorAction class inside the ButtonFrame class:
Look closely at the actionPerformed method. The ColorAction class doesn’t have a buttonPanel field. But the outer ButtonFrame class does. This situation is very common. Event listener objects usually need to carry out some action that affects other objects. You can often strategically place the listener inside the class whose state the listener should modify.
11.1 Basics of Event Handling. 
Listing 11.1 contains the complete frame class. Whenever you click one of the buttons, the appropriate action listener changes the background color of the panel.
Listing 11.1 button/ButtonFrame.java.
1 package button;
2
3 import java.awt.*;
4 import java.awt.event.*;
5 import javax.swing.*;
6
7 /**
8 * A frame with a button panel
9 */
10 public class ButtonFrame extends JFrame
11 {
12 private JPanel buttonPanel;
13 private static final int DEFAULT_WIDTH = 300;
14 private static final int DEFAULT_HEIGHT = 200;
15
16 public ButtonFrame()
17 {
18 setSize(DEFAULT_WIDTH, DEFAULT_HEIGHT);
19
20 // create buttons
21 JButton yellowButton = new JButton("Yellow");
22 JButton blueButton = new JButton("Blue");
23 JButton redButton = new JButton("Red");
24
25 buttonPanel = new JPanel();
26
27 // add buttons to panel
28 buttonPanel.add(yellowButton);
29 buttonPanel.add(blueButton);
30 buttonPanel.add(redButton);
31
32 // add panel to frame
33 add(buttonPanel);
34
35 // create button actions
36 ColorAction yellowAction = new ColorAction(Color.YELLOW);
37 ColorAction blueAction = new ColorAction(Color.BLUE);
38 ColorAction redAction = new ColorAction(Color.RED);
39
40 // associate actions with buttons
41 yellowButton.addActionListener(yellowAction);
42 blueButton.addActionListener(blueAction);
43 redButton.addActionListener(redAction);
44 }
45
46 /**
47 * An action listener that sets the panel's background color.
48 */
49 private class ColorAction implements ActionListener
50 {
51 private Color backgroundColor;
52
53 public ColorAction(Color c)
54 {
55 backgroundColor = c;
56 }
57
58 public void actionPerformed(ActionEvent event)
59 {
60 buttonPanel.setBackground(backgroundColor);
61 }
62 }
63 }
javax.swing.JButton 1.2.
 JButton(String label);
 JButton(Icon icon);
 JButton(String label, Icon icon);
constructs a button. The label string can be plain text or, starting with Java SE 1.3, HTML; for example, "<html><b>Ok</b></html>". java.awt.Container 1.0 If you have programmed Microsoft Windows applications with Visual Basic or C#, you know about the ease of use that comes with the graphical layout tools and resource editors these products provide. These tools let you design the visual appearance of your application, and then they generate much (often all) of the GUI code for you. GUI builders are available for Java programming too, but we feel that in order to use these tools effectively, you should know how to build a user interface manually. The remainder of this chapter shows you the basics of displaying windows and painting their contents.
10.2 Creating a Frame.
A top-level window (that is, a window that is not contained inside another window) is called a frame in Java. The AWT library has a class, called Frame, for this top level. The Swing version of this class is called JFrame and extends the Frame class. The JFrame is one of the few Swing components that is not painted on a canvas.
Thus, the decorations (buttons, title bar, icons, and so on) are drawn by the user’s windowing system, not by Swing. 
CAUTION: Most Swing component classes start with a “J”: JButton, JFrame, and so on.There are classes such as Button and Frame, but they are AWT components. If you accidentally omit a “J”, your program may still compile and run, but the mixture of Swing and AWT components can lead to visual and behavioral inconsistencies. In this section, we will go over the most common methods for working with a Swing JFrame. Listing 10.1 lists a simple program that displays an empty frame on the screen, as illustrated in Figure 10.5.
Listing 10.1 simpleframe/SimpleFrameTest.java
Let’s work through this program, line by line. The Swing classes are placed in the javax.swing package. The package name javax indicates a Java extension package, not a core package. For historical reasons, Swing is considered an extension. However, it is present in every Java SE implementation since version 1.2. By default, a frame has a rather useless size of 0 ? 0 pixels. We define a subclass SimpleFrame whose constructor sets the size to 300 ? 200 pixels. This is the only difference between a SimpleFrame and a JFrame. In the main method of the SimpleFrameTest class, we construct a SimpleFrame object and make it visible.
There are two technical issues that we need to address in every Swing program. First, all Swing components must be configured from the event dispatch thread, the thread of control that passes events such as mouse clicks and keystrokes to the user interface components. The following code fragment is used to execute statements in the event dispatch thread:
We discuss the details in Chapter 14. For now, you should simply consider it a magic incantation that is used to start a Swing program.
 Component add(Component c) adds the component c to this container.
11.1.2 Specifying Listeners Concisely.
In the preceding section, we defined a class for the event listener and constructed three objects of that class. It is not all that common to have multiple instances of.
11.1 Basics of Event Handling a listener class. Most commonly, each listener carries out a separate action. In that case, there is no need to make a separate class. Simply use a lambda expression:
exitButton.addActionListener(event -> System.exit(0)); 
Now consider the case in which we have multiple related actions, such as the color buttons of the preceding section. In such a case, implement a helper method: public void makeButton(String name, Color backgroundColor.
Note that the lambda expression refers to the parameter variable backgroundColor.
Then we simply call:
makeButton("yellow", Color.YELLOW);
makeButton("blue", Color.BLUE);
makeButton("red", Color.RED);
Here, we construct three listener objects, one for each color, without explicitly defining a class. Each time the helper method is called, it makes an instance of a class that implements the ActionListener interface. Its actionPerformed action references the backGroundColor value that is, in fact, stored with the listener object. However, all this happens without having to explicitly define listener classes, instance variables, or constructors that set them. NOTE: In older code, you will often see the use of anonymous classes:
8.8.4 Wildcard Capture.
Let us write a method that swaps the elements of a pair:
public static void swap(Pair<?> p);
A wildcard is not a type variable, so we can’t write code that uses ? as a type. In other words, the following would be illegal:
? t = p.getFirst(); // Error
p.setFirst(p.getSecond());
p.setSecond(t);
That’s a problem because we need to temporarily hold the first element when we do the swapping. Fortunately, there is an interesting solution to this problem. We can write a helper method, swapHelper, like this:
T t = p.getFirst();
p.setFirst(p.getSecond());
p.setSecond(t);
Note that swapHelper is a generic method, whereas swap is not—it has a fixed parameter of type Pair<?>.
Now we can call swapHelper from swap:
In this case, the parameter T of the swapHelper method captures the wildcard. It isn’t known what type the wildcard denotes, but it is a definite type, and the definition of <T>swapHelper makes perfect sense when T denotes that type. Of course, in this case, we were not compelled to use a wildcard. We could have directly implemented <T> void as a generic method without wildcards. However, consider this example in which a wildcard type occurs naturally in the middle of a computation: 
minmaxBonus(a, result);
PairAlg.swap(result); // OK--swapHelper captures wildcard type
Here, the wildcard capture mechanism cannot be avoided. Wildcard capture is only legal in very limited circumstances. The compiler must be able to guarantee that the wildcard represents a single, definite type. 
Chapter 8 Generic Programming.
example, the T in ArrayList<Pair<T>> can never capture the wildcard in ArrayList<Pair<?>>. The array list might hold two Pair<?>, each of which has a different type for ?. The test program in Listing 8.3 gathers up the various methods that we discussed in the preceding sections, so that you can see them in context.
Listing 8.3 pair3/PairTest3.java.
1 package pair3;
2
3 /**
4 * @version 1.01 2012-01-26
5 * @author Cay Horstmann
6 */
7 public class PairTest3
8 {
9 public static void main(String[] args)
10 {
11 Manager ceo = new Manager("Gus Greedy", 800000, 2003, 12, 15);
12 Manager cfo = new Manager("Sid Sneaky", 600000, 2003, 12, 15);
13 Pair<Manager> buddies = new Pair<>(ceo, cfo);
14 printBuddies(buddies);
15
16 ceo.setBonus(1000000);
17 cfo.setBonus(500000);
18 Manager[] managers = { ceo, cfo };
19
20 Pair<Employee> result = new Pair<>();
21 minmaxBonus(managers, result);
22 System.out.println("first: " + result.getFirst().getName()
23 + ", second: " + result.getSecond().getName());
24 maxminBonus(managers, result);
25 System.out.println("first: " + result.getFirst().getName()
26 + ", second: " + result.getSecond().getName());
27 }
28
29 public static void printBuddies(Pair<? extends Employee> p)
30 {
31 Employee first = p.getFirst();
32 Employee second = p.getSecond();
33 System.out.println(first.getName() + " and " + second.getName() + " are buddies.");
34 }
35
36 public static void minmaxBonus(Manager[] a, Pair<? super Manager> result)
37 {
38 if (a.length == 0) return;
39 Manager min = a[0];
40 Manager max = a[0];
41 for (int i = 1; i < a.length; i++)
42 {
43 if (min.getBonus() > a[i].getBonus()) min = a[i];
44 if (max.getBonus() < a[i].getBonus()) max = a[i];
45 }
46 result.setFirst(min);
47 result.setSecond(max);
48 }
49
50 public static void maxminBonus(Manager[] a, Pair<? super Manager> result)
51 {
52 minmaxBonus(a, result);
53 PairAlg.swapHelper(result); // OK--swapHelper captures wildcard type
54 }
55 }
56
57 class PairAlg
58 {
59 public static boolean hasNulls(Pair<?> p)
60 {
61 return p.getFirst() == null || p.getSecond() == null;
62 }
63
64 public static void swap(Pair<?> p) { swapHelper(p); }
65
66 public static <T> void swapHelper(Pair<T> p)
67 {
68 T t = p.getFirst();
69 p.setFirst(p.getSecond());
70 p.setSecond(t);
71 }
72 }
Reflection lets you analyze arbitrary objects at runtime. If the objects are instances of generic classes, you don’t get much information about the generic type parametersbecause they have been erased. In the following sections, you will learn what you can nevertheless find out about generic classes with reflection.
8.9.1 The Generic Class Class.
The Class class is now generic. For example, String.class is actually an object (in fact, the sole object) of the class Class<String>. 
450 Chapter 8 Generic Programming.
The type parameter is useful because it allows the methods of Class<T> to be more specific about their return types. The following methods of Class<T> take advantage of the type parameter:
T newInstance();
T cast(Object obj);
T[] getEnumConstants();
Class<? super T> getSuperclass();
Constructor<T> getConstructor(Class... parameterTypes);
Constructor<T> getDeclaredConstructor(Class... parameterTypes);
The newInstance method returns an instance of the class, obtained from the no-argument constructor. Its return type can now be declared to be T, the same type as the class that is being described by Class<T>. That saves a cast. The cast method returns the given object, now declared as type T if its type is indeed a subtype of T. Otherwise, it throws a BadCastException. The getEnumConstants method returns null if this class is not an enum class or an array of the enumeration values which are known to be of type T. Finally, the getConstructor and getDeclaredConstructor methods return a Constructor<T> object. The Constructor class has also been made generic so that its newInstance methodhas the correct return type.

